@startuml DiagramaCentral

' tema

!define MyFontColor #000000
!define MyBorderColor #800080
!define MyBackgroundColor #E6E6FA
!define MyArrowColor #800080
!define MyPackageColor #DDDDDD

skinparam defaultFontName Arial
skinparam DefaultFontSize 13
skinparam Linetype ortho
skinparam Arrowcolor MyArrowColor
skinparam ArrowThickness 2
skinparam Classbordercolor MyBorderColor
skinparam ClassBorderThickness 2
skinparam ClassBackgroundColor MyBackgroundColor
skinparam Shadowing true
skinparam GroupInheritance 1
skinparam NoteBackgroundColor yellow
skinparam NoteBorderThickness 2
skinparam PackageBackgroundColor MyPackageColor

' clases

package -CentralNuclear- {
	class CentralNuclear implements .Suscriptor {
		- reactor: Reactor
		- generador: Generador
		- datosFuncionamiento : DatosEnTodoMomento

		- constructor(reactor: Reactor, generador: Generador): void
		- actualizar(notificador: SensorTermico): void
		+ iniciarReactor(): void
		+ detenerReactor(): void
		+ generarEnergia(duracion : number, temperatura?: number): number
		+ mostrarDatosFuncionamiento(): string
		+ setTemperaturaReactor(temp: number): void
	}

	class DatosEnTodoMomento <<Singleton>> {
		- _temperatura: number
		- _energiaProducida: number
		- _barrasGastadas: number
		- _vecesNormal: number
		- _vecesCritico: number
		- _vecesApagado: number
		- {static} _instance: DatosEnTodoMomento

		- constructor(): void
		+ {static} getInstance(): DatosEnTodoMomento
		+ contarBarra(): void
		+ contarNormal(): void
		+ contarCritico(): void
		+ contarApagado(): void
		+ toString(): string
	}
}

package -Controles- {
	class Computadora implements .Notificador, .Suscriptor {
		- suscriptores: Suscriptor[]
		- modoEnfriamiento: boolean
		- temperaturaReactor: number

		+ suscribir(suscriptor: Suscriptor): void
		+ desuscribir(suscriptor: Suscriptor): void
		+ notificar(): void
		+ actualizar(notificador: SensorTermico): void
		+ verificarTemperatura(temperatura: number): void
		- activarModoEnfriamiento(): void
		- desactivarModoEnfriamiento(): void
	}

	class GerenciaBurns implements .Notificador, .Suscriptor { 
		- suscriptores: Suscriptor[]
		
		+ suscribir(suscriptor: Suscriptor): void
		+ desuscribir(suscriptor: Suscriptor): void
		+ actualizar(notificador: SensorTermico): void
		+ notificar(): void
	}
}

package -SistemaDeRegulacionTermica- {
	abstract class SistemaDeRegulacionTermica implements .Suscriptor {
		# encendido: boolean

		+ actualizar(notificador: Computadora): void
		+ encenderSistema(): void
		+ apagarSistema(): void
		+ getEstado(): boolean
		+ {abstract} verificadorParaEncender(temperatura: number): void
		+ {abstract} getEnergiaTermica(energiaTermica: number): number
	}

	class SistemaBarrasDeControl extends SistemaDeRegulacionTermica {
		- barrasDeControl: BarraDeControl[]
		- barrasGastadas: number

		- procesarBarra(): void
		+ getBarrasGastadas(): number
		+ aumentarBarrasGastadas(): void
		+ isEmpty(): boolean
		+ addBarra(barraControl: BarraDeControl): void
		+ removeBarra(): void
		+ getBarraActual(): BarraDeControl
		+ comprobarReemplazo(barraActual: BarraDeControl): void
		+ verificadorParaEncender(temperatura: number): void
		+ getPorcentajeReduccion(): number
		+ getEnergiaTermica(energiaTermica: number): number
		+ getBarras(): BarraDeControl[]
	}
	
	class BarraDeControl {
		- vidaUtil: number
		- nroSerie: number

		+ getVidaUtil(): number
		+ setVidaUtil(TiempovidaUtil: number): void
		+ controlarVidaUtil(vidaUtil: number): void
		+ desgasteBarraVidaUtil(): number
		+ getNroSerie(): number
		+ setNroSerie(nroSerie: number): void
	}
}

package -Generadores- {
	package -GeneradorElectrico- #BBBBBB {
		class Generador {
			+ generarEnergiaElectrica(energiaTermica: number): number
		}
	}

	package -Reactor- #BBBBBB {
		package -Combustible- #999999 {
			abstract class CombustibleNuclear {
				# cantidad: number
				# limite: number

				+ recargar(cantidad: number): void
				+ {abstract} consumir(cantidad: number): number
				+ tieneCombustible(): boolean
				+ {abstract} calcularEnergiaTermica(cantidad: number): number
				+ {method} getters y setters
			}

			class Uranio extends CombustibleNuclear {
				+ consumir(cantidad: number): number
				+ calcularEnergiaTermica(cantidad: number): number
			}
		}

		package -Estados- #999999 {
			abstract class Estado {
				# reactor!: Reactor

				+ setReactor(reactor: Reactor): void
				+ {abstract} iniciar(): void
				+ {abstract} detener(): void
				+ {abstract} procesarEnergiaTermica(): void
			}
			class Apagado extends Estado {
				+ iniciar(): void
				+ detener(): void
				+ procesarEnergiaTermica(): void
			}

			abstract class Encendido extends Estado {
				# {abstract} controlarEstado(): void
				# {abstract} absorcionEnergiaTermica(energiaTermica: number): number
				+ procesarEnergiaTermica(): void
			}

			class Normal extends Encendido {
				+ iniciar(): void
				+ detener(): void
				# controlarEstado(): void
				# absorcionEnergiaTermica(energiaTermica: number): number
			}

			class Critico extends Encendido {
				+ iniciar(): void
				+ detener(): void
				# controlarEstado(): void
				# absorcionEnergiaTermica(energiaTermica: number): number
			}
		}

		class Reactor {
			- consumoCombustible: number
			- energiaTermica: number
			- estado!: Estado
			- combustible: CombustibleNuclear
			- sistemaDeRegulacionTermica: SistemaDeRegulacionTermica
			- sensor: SensorTermico

			- constructor(combustible: CombustibleNuclear, sistemaRegulacionTermica: SistemaDeRegulacionTermica, sensor: SensorTermico): void
			+ cambiarA(estado: Estado): void
			+ iniciar(): void
			+ detener(): void
			+ generarEnergiaTermica(): number
			+ consumirCombustible(cantidad: number): void
			+ getAdicionalEnergia(): number
			- controlarEnergiaTermica(energiaTermica: number): number
			+ {method} getters y setters
		}

		class SensorTermico implements .Notificador {
			- temperatura: number
			- suscriptores: Suscriptor[]

			+ suscribir(suscriptor: Suscriptor): void
			+ desuscribir(): void
			+ notificar(): void
			+ medir(): number
			+ {method} getters y setters
		}
	}
}

' interfaces

interface Notificador {
	+ suscribir(suscriptor: Suscriptor): void
	+ desuscribir(suscriptor: Suscriptor): void
	+ notificar(): void
}

interface Suscriptor {
	+ actualizar(notificador: Notificador): void
}

' relaciones

Reactor *-- CombustibleNuclear
Reactor *-- SensorTermico
Reactor *-- SistemaDeRegulacionTermica
Reactor *-- Estado

SistemaBarrasDeControl *-- BarraDeControl

CentralNuclear *-- Reactor
CentralNuclear *-- Generador
CentralNuclear *-- DatosEnTodoMomento

@enduml