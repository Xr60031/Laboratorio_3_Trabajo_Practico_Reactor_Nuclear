@startuml DiagramaCentral

' tema

!define MyFontColor #000000
!define MyBorderColor #800080
!define MyBackgroundColor #E6E6FA
!define MyArrowColor #800080

skinparam defaultFontName Arial
skinparam DefaultFontSize 13
skinparam Linetype ortho
skinparam Arrowcolor MyArrowColor
skinparam ArrowThickness 2
skinparam Classbordercolor MyBorderColor
skinparam ClassBorderThickness 2
skinparam ClassBackgroundColor MyBackgroundColor
skinparam Shadowing true
skinparam GroupInheritance 1
skinparam NoteBackgroundColor yellow
skinparam NoteBorderThickness 2

' clases

abstract class CombustibleNuclear {
  	# cantidad: number
  	# limite: number

  	+ recargar(cantidad: number): void
  	+ {abstract} consumir(cantidad: number): number
  	+ tieneCombustible(): boolean
  	+ {abstract} calcularEnergiaTermica(cantidad: number): number
	+ gettersYsetters()
}

class Uranio extends CombustibleNuclear {
  	+ consumir(cantidad: number): number
  	+ calcularEnergiaTermica(cantidad: number): number
}

abstract class SistemaDeRegulacionTermica implements Suscriptor{
    # encendido: boolean
	+ actualizar(notificador: Computadora): void
    + encenderSistema(): void
    + apagarSistema(): void
    + getEstado(): boolean
    + {abstract} verificadorParaEncender(temperatura: number): void
    + {abstract} getEnergiaTermica(energiaTermica: number): number
}

class BarraDeControl{
    - vidaUtil: number
    - nroSerie: number
    + getVidaUtil(): number
    + setVidaUtil(TiempovidaUtil: number): void
    + controlarVidaUtil(vidaUtil:number): void
    + desgasteBarraVidaUtil(): Number
	+ getNroSerie(): number
	+ setNroSerie(nroSerie:number):void
}

class SistemaBarrasDeControl extends SistemaDeRegulacionTermica{
    - barrasDeControl:Array<BarraDeControl>
	- barrasGastadas:number
	+ getBarrasGastadas():number
	+ aumentarBarrasGastadas():void
    + isEmpty(): boolean
    + addBarra(barraControl:BarraDeControl): void
    + removeBarra(): void
    + getBarraActual(): BarraDeControl
    + comprobarReemplazo(barraActual:BarraDeControl): void
    - procesarBarra(): void
    + verificadorParaEncender(temperatura:number): void
    + getPorcentajeReduccion(): number
    + getEnergiaTermica(energiaTermica: number): number
	+ getBarras():Array<BarraDeControl>|undefined
}

class SensorTermico implements Notificador {
  	- temperatura: number
	- suscriptores: Suscriptor[]

	+ suscribir(suscriptor: Suscriptor): void
	+ desuscribir(): void
	+ notificar(): void
  	+ medir(): number
	+ gettersYsetters()
}


class Computadora implements Notificador, Suscriptor {
	- suscriptores: Suscriptor[]
	- modoEnfriamiento: boolean
	- temperaturaReactor: number

	+ suscribir(suscriptor: Suscriptor): void
	+ desuscribir(suscriptor: Suscriptor): void
	+ notificar(): void
	+ actualizar(notificador: SensorTermico): void
	+ verificarTemperatura(temperatura: number): void
  	- activarModoEnfriamiento(): void
  	- desactivarModoEnfriamiento(): void
}

class Reactor {
	- {static} instance: Reactor
    - consumoCombustible: number
    - energiaTermica: number
    - estado!: Estado
    - combustible: CombustibleNuclear
    - sistemaDeRegulacionTermica: SistemaDeRegulacionTermica
    - sensor: SensorTermico

	- constructor(combustible: CombustibleNuclear, sistemaRegulacionTermica: SistemaDeRegulacionTermica, sensor: SensorTermico, estado: Estado)
	+ {static} getInstance(combustible: CombustibleNuclear, sistema: SistemaDeRegulacionTermica, sensor: SensorTermico, estadoInicial: Estado)
	+ cambiarA(estado: Estado)
	+ iniciar(): void
	+ detener(): void
	+ generarEnergiaTermica(): number
	+ consumirCombustible(cantidad: number): void
	+ getAdicionalEnergia(): number
	- controlarEnergiaTermica(energiaTermica: number): number
	+ gettersYsetters()
}

class Generador {
	+ generarEnergiaElectrica(energiaTermica: number): number
}

class CentralNuclear implements Suscriptor{
	- {static} instance: CentralNuclear
	- reactor: Reactor
	- generador: Generador
	- datosFuncionamiento : DatosEnTodoMomento
	- constructor (reactor: Reactor, generador: Generador)
	- actualizar (notificador: SensorTermico): void
	+ {static} getInstance(reactor: Reactor, generador: Generador): CentralNuclear
	+ iniciarReactor()
	+ generarEnergia(duracion : number, temperatura? : number) : number
	+ mostrarDatosFuncionamiento():string
	+ setTemperaturaReactor(temp : number)
}

abstract class Estado {
	# reactor!: Reactor
	+ setReactor(reactor: Reactor)
	+ {abstract} iniciar(): void
	+ {abstract} detener(): void
	+ {abstract} procesarEnergiaTermica(): void
	+ {abstract} toString(): string
}

class Normal extends Encendido{
	+ iniciar():void
	+ detener(): void
	+ toString(): string
	# controlarEstado(): void
	# absorcionEnergiaTermica(energiaTermica: number): number
}

class Critico extends Encendido{
	+ iniciar():void
	+ detener(): void
	+ toString(): string
	# controlarEstado(): void
	# absorcionEnergiaTermica(energiaTermica: number): number
}

class Apagado extends Estado{
	+ iniciar():void
	+ detener(): void
	+ toString(): string
	# controlarEstado(): void
	# absorcionEnergiaTermica(energiaTermica: number): number
}

class Encendido extends Estado{
	# {abstract} controlarEstado(): void
	# {abstract} absorcionEnergiaTermica(energiaTermica: number): number
	+ procesarEnergiaTermica(): void
}

' interfaces

interface Notificador {
	+ suscribir(suscriptor: Suscriptor): void
	+ desuscribir(suscriptor: Suscriptor): void
	+ notificar(): void
}

interface Suscriptor {
	+ actualizar(notificador: Notificador): void
}

' relaciones

Reactor *-r- CombustibleNuclear
Reactor *-- SensorTermico
Reactor *-l- SistemaDeRegulacionTermica
Reactor *-d- Estado

SistemaBarrasDeControl *-- BarraDeControl

CentralNuclear *-- Reactor
CentralNuclear *-l- Generador
@enduml