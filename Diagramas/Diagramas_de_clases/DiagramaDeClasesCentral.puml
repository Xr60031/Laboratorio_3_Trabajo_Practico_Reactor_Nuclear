@startuml DiagramaCentral

' tema

!define MyFontColor #000000
!define MyBorderColor #800080
!define MyBackgroundColor #E6E6FA
!define MyArrowColor #800080

skinparam defaultFontName Arial
skinparam DefaultFontSize 13
skinparam Linetype ortho
skinparam Arrowcolor MyArrowColor
skinparam ArrowThickness 2
skinparam Classbordercolor MyBorderColor
skinparam ClassBorderThickness 2
skinparam ClassBackgroundColor MyBackgroundColor
skinparam Shadowing true
skinparam GroupInheritance 1
skinparam NoteBackgroundColor yellow
skinparam NoteBorderThickness 2

' clases

enum EstadoReactor {
  	APAGADO
  	NORMALIDAD
  	CRITICIDAD
  	CRITICA
}

abstract class CombustibleNuclear {
  	- cantidadEnToneladas: number

  	+ recargar(number): void
  	+ {abstract} consumir(number): number
  	+ tieneCombustible(): boolean
}

class Uranio extends CombustibleNuclear {
  	+ consumir(number): number
}

abstract class SistemaDeRegulacionTermica {
    - estado: boolean
    + encenderSistema(): void
    + apagarSistema(): void
    + getEstado(): boolean
    + abstract controlarTemperatura(temperatura: number): void
    + abstract getEnergiaTermica(energiaTermica: number): number
}

class BarraDeControl{
    - vidaUtil: number
    - nroSerie: number
    + getVidaUtil(): number
    + setVidaUtil(TiempovidaUtil: number): void
    + controlarVidaUtil(vidaUtil:number): void
    + desgasteBarraVidaUtil(): Number
	+ getNroSerie(): number
	+ setNroSerie(nroSerie:number):void
}

class SistemaBarrasDeControl extends SistemaDeRegulacionTermica{
    - barrasDeControl:Array<BarraDeControl>
	- barrasGastadas:number
	+ getBarrasGastadas():number
	+ aumentarBarrasGastadas():void
    + isEmpty(): boolean
    + addBarra(barraControl:BarraDeControl): void
    + removeBarra(): void
    + getBarraActual(): BarraDeControl
    + comprobarReemplazo(barraActual:BarraDeControl): void
    - procesarBarra(): void
    + controlarEnergiaTermica(temperatura:number): void
    + getPorcentajeProduccion(): number
    + getEnergiaTermica(energiaTermica: number): number
	+ getBarras():Array<BarraDeControl>|undefined
}

class SensorTermico {
  	+ medir(): number
}

class Computadora {
  	- reactor: Reactor
  	+ recibirAlerta(): void
  	+ activarModoEnfriamiento(): void
}

class Reactor {
	- combustible: CombustibleNuclear
	- sensorTermico: SensorTermico
	- sistemaDeRegulacionTermica: SistemaDeRegulacionTermica
	- estado: EstadoReactor
	- modoEnfriamiento: boolean
	- puedeGenerarEnergiaTermica: boolean
	- consumoCombustible: number
	- potenciaTermica: number

	+ iniciar(): void
	+ mantener(): void
	+ detener(): void
	+ generarEnergiaTermica(temperatura: number): number
	- enfriar(): void
}

class Generador {
	+ generarEnergiaElectrica(energiaTermica: number): number
}

class CentralNuclear {
	- reactor: Reactor
	- generador: Generador

	+ generarEnergia(): number
}

' relaciones

Reactor *-r- CombustibleNuclear
Reactor *-- SensorTermico
Reactor *-l- SistemaDeRegulacionTermica

CentralNuclear *-- Reactor
CentralNuclear *-l- Generador

@enduml